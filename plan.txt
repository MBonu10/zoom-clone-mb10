# to do list

- Initialise the nodeJs project - Done
- Initialise first view - Done
- Create a room id - done (uuid, and stuff)
- Add the ability to view our own video- done
- Add ability to allow others to stream video (peer to peer streaming, pjs, nodejs, socket io, uuid, expressjs, web rtc)
   sockets- socket.io is for real time communication/ asynchronour
            real time comm. kinda like internet protocol
        socket vs http : with  http client can only request from reserver and server responds
        but with socket.io the server can communicate with clientthe server doesnt have to wait for your request
        ...
        ...
        ...
        more stuff
   peer.js

   done

- Add styling done
- Ability to create messages not quite
- Mute
- Stop video 

#video-grid{
    display: flex;
    justify-content: center;
}
video{
    height: 300px;
    width : 400px;
    object-fit: cover;
}



script.js
const socket = io();
const videoGrid = document.getElementById('video-grid');
const myVideo = document.createElement('video')//creating elemt
myVideo.muted = true //you can t hear your own video
var peer =new Peer(undefined //this is actually the id
    ,{
        path:'/peerjs',
        host: '/',
        port: '3030',
})

let myVideoStream;
navigator.mediaDevices.getUserMedia({
    video: true,
    audio: true,
}).then((stream)=>{ myVideoStream=stream;
addVideoStream(myVideo, stream);

    peer.on('call', call =>{
        call.answer(stream)//we answer it and add it to our video stream 
        const video = document.createElement('video')
        call.on('stream', userVideoStream=>{
            addVideoStream(video, userVideoStream)
        })
    })
    let text = $("input");
    // when press enter send message
    $('html').keydown(function (e) {
        if (e.which == 13 && text.val().length !== 0) {
          
            socket.emit('message', text.val());

            text.val('')
        }
    });

    socket.on('createMessage', message => {
        //console.log('from server...', message)

        $('.messages').append(`<li class = "message><b>user</b>${message}</li>`)
        scrollToBottom()
    })
})

    
//access, this will be a promise, event in the future whch will either be resolved or be rejected


peer.on('open', id =>{ //id is automatically generated?
    console.log(id);
    socket.emit('join-room', ROOM_ID, id);
})



/*
  socket.emit('join-room', ROOM_ID, id);

socket.on('user-connected',(userId) =>{
    connecToNewUser(userId, stream);
}) */


const connecToNewUser = (userId) =>{
  //  console.log(userId);
  //using peer
  const call = peer.call(userId, stream)//we are calling the user
  const video = document.createElement('video')
  call.on('stream', userVideoStream =>{
    addVideoStream(video, userVideoStream)//peer stream 
  })
}
//listen on the opening of peer connection by wrapping the join room



const addVideoStream = (video, stream) =>
{
  video.srcObject = stream;
  video.addEventListener('loadedmetadata', ()=>{
      video.play();
  })

  videoGrid.append(video);
}

const scrollToBottom = ()=>{
    var d = $('.main__chat__window');
    d.scrollToBottom(d.prop("scrollHeight"));
}

const muteUnmute =() =>{
    const enabled = myVideoStream.getAudioTracks()[0].enabled;
    if(enabled){
        myVideoStream.getAudioTracks()[0].enabled =false;
        setUnmuteButton();
    }
    else{
        setMuteButton();
        myVideoStream.getAudioTracks()[0].enabled =true;
    }
}
const playStop = () => {
    console.log('object')
    let enabled = myVideoStream.getVideoTracks()[0].enabled;
    if (enabled) {
        myVideoStream.getVideoTracks()[0].enabled = false;
        setPlayVideo()
    } else {
        setStopVideo()
        myVideoStream.getVideoTracks()[0].enabled = true;
    }
}
const setMuteButton = () =>{
    const html = `<i class = "fas fa-microphone"></i>
    <span>Mute</span>
    `
    document.querySelector('.main__mute_button').innerHTML = html;
}
const setUnmuteButton = () => {
    const html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Unmute</span>
  `
    document.querySelector('.main__mute_button').innerHTML = html;
}

const setStopVideo = () => {
    const html = `
    <i class="fas fa-video"></i>
    <span>Stop Video</span>
  `
    document.querySelector('.main__video_button').innerHTML = html;
}

const setPlayVideo = () => {
    const html = `
  <i class="stop fas fa-video-slash"></i>
    <span>Play Video</span>
  `
    document.querySelector('.main__video_button').innerHTML = html;
}